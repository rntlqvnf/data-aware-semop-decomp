Your task is to design {{ num_strategies }} distinct, executable strategies to solve the following user request for {{ modality }} data:

"{{ operator_prompt }}"

Each strategy must be expressed as a YAML program that returns a final boolean value.

Guiding Principles for Strategies
Generate strategies with different trade-offs:
1.  A "Fast & Cheap" strategy that prioritizes local, low-latency models.
2.  A "High Accuracy" strategy that uses powerful, potentially expensive cloud models (like GPT-4o) to achieve the best possible result.
3.  A "Balanced Hybrid" strategy that uses cheap local models for initial filtering and expensive models only on promising candidates.

Output Format (Required)
You MUST return your strategies as a single YAML object. Provide no additional explanation or commentary.
The structure MUST be:

strategies:
  - name: StrategyA
    description: "A brief one-line description of this strategy's approach."
    plan:
      - id: <unique_step_id>
        op: <ActionName>
        in:
          <input_var1>:
            type: variable
            source_step: <step_id>        # 'input' if it's the initial user-provided variable
            output_index: <integer>       # Optional; default is 0
          <input_var2>:
            type: literal
            value: <literal_value>
        out: [<output_var1>, <output_var2>]
    return: [<return_var1>, <return_var2>]

Special Rules for ExecutePythonCode Action
If you use the ExecutePythonCode action (or any other action that generates Python code)
- DO NOT use return statements in the code block.
- Instead, store results in variables, like result = ....
- The system will retrieve only the variables listed in out: via expected_outputs.

Available Action Set
You may ONLY use the atomic actions listed below. The description field explains what each action does. 

{{ available_actions_yaml }}

Goal
For each strategy:
- Be strict and avoid any free-text or markdown formattingâ€”output only a YAML block.